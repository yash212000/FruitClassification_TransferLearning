# -*- coding: utf-8 -*-
"""Fruit_Classification_TransferLearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1siWtTMky0nby4X1Y5q-t31ApWBAQxBGV
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import matplotlib.image as mpimg
import seaborn as sns
import random
import zipfile
import pathlib


from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Activation
from tensorflow.keras import Sequential
import datetime

from tensorflow.keras.applications import EfficientNetB0, ResNet50V2
from tensorflow.keras.preprocessing import image

from sklearn.metrics import confusion_matrix

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! kaggle datasets download -d utkarshsaxenadn/fruits-classification

zip_ref = zipfile.ZipFile('fruits-classification.zip',"r")
zip_ref.extractall()
zip_ref.close()

data_dir= pathlib.Path("Fruits Classification/train")
class_names = [i.name for i in data_dir.glob('*')]
class_names

Image_shape=(224,224)
Batch_size=32

train_dir='/content/Fruits Classification/train'
val_dir='/content/Fruits Classification/valid/'

train_data_gen = ImageDataGenerator(rescale=1/255)
val_data_gen = ImageDataGenerator(rescale=1/255)

train_data = train_data_gen.flow_from_directory(train_dir,target_size=Image_shape,
                                                        batch_size=Batch_size,
                                                        class_mode='categorical')

valid_data = val_data_gen.flow_from_directory(val_dir,
                                              target_size=Image_shape,
                                              batch_size=Batch_size,
                                              class_mode='categorical')

def create_tensorboard_callback(dir_name, experiment_name):
  log_dir=dir_name+'/'+experiment_name+'/'+datetime.datetime.now().strftime('%Y%m%d-%H')
  tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir)
  print(f'saving tensorboardcallback:{log_dir}')
  return tensorboard_callback

base_model = ResNet50V2(include_top=False)

base_model.trainable = False

inputs = tf.keras.layers.Input(shape=(224,224,3),name='input_layer')

x = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)(inputs)
x = base_model(inputs)

print(f'Shape after base_model:{x.shape}')

x = tf.keras.layers.GlobalAveragePooling2D(name='gloabl_average2D')(x)
print(f'Global average 2D pooling shape:{x.shape}')

# x = Dense(128,activation='relu')(x)
x= tf.keras.layers.Dropout(0.2)(x)

outputs = tf.keras.layers.Dense(5,activation='softmax',name='output_layer')(x)

model_1=tf.keras.Model(inputs,outputs)

model_1.compile(loss='categorical_crossentropy',
                optimizer=Adam(),
                metrics=['accuracy'])

history_transferlearning_1= model_1.fit(train_data,
                                        epochs=10,
                                        steps_per_epoch=len(train_data),
                                        validation_data=valid_data,
                                        validation_steps=int(0.25*len(valid_data)),
                                        callbacks=[create_tensorboard_callback("transfer_learning",'transfer_learning_featureextraction2')])

def plot_loss_curves(history):
  loss=history.history['loss']
  val_loss=history.history['val_loss']

  accuracy=history.history['accuracy']
  val_accuracy=history.history['val_accuracy']

  epochs= range(len(history.history['loss']))

  #plotloss
  plt.plot(epochs,loss,label='training_loss')
  plt.plot(epochs,val_loss,label='val_loss')
  plt.title('loss')
  plt.xlabel('epochs')
  plt.legend()

  #plotaccuracy
  plt.figure()
  plt.plot(epochs,accuracy,label='training_accuracy')
  plt.plot(epochs,val_accuracy,label='val_accuracy')
  plt.title('accuracy')
  plt.xlabel('epochs')
  plt.legend()

# find indices of train_data
train_data.class_indices

category = {
    0:'Apple',
    1:'Banana',
    2:'Grape',
    3:'Mango',
    4:'Strawberry'
}

img_=image.load_img('/content/Fruits Classification/valid/Mango/Mango (1306).jpeg',target_size=(224,224))
img_array = image.img_to_array(img_)
print(img_array)
img_processed = np.expand_dims(img_array,axis=0)
img_processed /= 255

prediction = model_1.predict(img_processed)
print(prediction)
index = np.argmax(prediction)
print(index)
plt.title("Prediction - {}".format(category[index]))
plt.imshow(img_array)

def predict_dir(filedir,model):
  cols=3
  pos=0
  images=[]
  total_images=len(os.listdir(filedir))
  rows=(total_images//cols+1)
  true = filedir.split('/')[-1]

  for i in sorted(os.listdir(filedir)):
    images.append(os.path.join(filedir,i))

  for subplot,imgg in enumerate(images):
    img_ = image.load_img(imgg,target_size=(224,224))
    img_array = image.img_to_array(img_)

    img_processed = np.expand_dims(img_array,axis=0)
    img_processed /= 255

    prediction = model.predict(img_processed)
    index = np.argmax(prediction)


    pred = category.get(index)
    if pred==true:
       pos+=1
    accu = pos/total_images
    print("Accuracy for {orignal}: {:.2f} ({pos}/{total})".format(accu,pos=pos,total=total_images,orignal=true))

for i in os.listdir('/content/Fruits Classification/test'):
  # print(i)
  predict_dir(os.path.join('/content/Fruits Classification/test',i),model_1)

